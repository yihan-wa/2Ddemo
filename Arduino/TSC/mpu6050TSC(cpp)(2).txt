#include <Wire.h>
#include <MPU6050.h>

MPU6050 mpu;

const float alpha = 0.98; // 加速度计和陀螺仪融合系数
float angleX = 0; // 初始角度
float angleY = 0;

unsigned long previousGyroMillis = 0;
const long gyroInterval = 100; // 陀螺仪更新间隔（毫秒）

// 按钮的引脚
const int buttonPin = 3;  // 按钮连接到 Arduino 的 D3 引脚
int buttonState = HIGH;      // 当前按钮状态
int lastButtonState = HIGH;  // 上次按钮状态

unsigned long lastDebounceTime = 0;  // 上次按钮状态改变的时间
const unsigned long debounceDelay = 50;  // 去抖动时间（毫秒）
const unsigned long fireInterval = 100;  // Fire信号的时间间隔（毫秒）
unsigned long lastFireTime = 0;  // 上次触发 Fire 信号的时间

void setup() {
  Serial.begin(9600);
  Wire.begin();
  mpu.initialize();

  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed");
    while (1);
  }

  pinMode(buttonPin, INPUT);  // 将按钮的引脚设为输入模式，并启用上拉电阻
}

void loop() {
  unsigned long currentMillis = millis();
  
  if (currentMillis - previousGyroMillis >= gyroInterval) {
    previousGyroMillis = currentMillis;

    int16_t ax, ay, az;
    int16_t gx, gy, gz;
    mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    
    float accelAngleX = atan2(ay, az) * 180 / PI;
    float accelAngleY = atan2(ax, az) * 180 / PI;
    
    float gyroRateX = gx / 65.5; // 陀螺仪的灵敏度为 65.5 LSB/°/s
    float gyroRateY = gy / 65.5;

    float dt = gyroInterval / 1000.0; // 转换为秒
    angleX = alpha * (angleX + gyroRateX * dt) + (1 - alpha) * accelAngleX;
    angleY = alpha * (angleY + gyroRateY * dt) + (1 - alpha) * accelAngleY;
    
    // 发送角度数据到串口
    Serial.print("Angles:");
    Serial.print(angleX);
    Serial.print(",");
    Serial.println(angleY);
  }

  // 读取按钮状态
  int reading = digitalRead(buttonPin);
  
  // 去抖动处理
  if (reading != lastButtonState) {
    lastDebounceTime = millis(); // 更新去抖动时间
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading == HIGH) { // 按钮被按下
      if ((millis() - lastFireTime) >= fireInterval) {
        // 只有在达到 fireInterval 时间间隔时才触发 Fire 信号
        Serial.println("Fire");
        lastFireTime = millis(); // 更新上次触发时间
      }
    }
  } else {
    // 在按钮松开时重置最后触发时间
    if (reading == HIGH && lastButtonState == LOW) {
      lastFireTime = millis(); // 重置触发时间，防止松开后的额外触发
    }
  }

  lastButtonState = reading; // 保存当前按钮状态
}
